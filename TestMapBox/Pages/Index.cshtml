@page
@model IndexModel
<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8' />
    <title>CVRP</title>
    <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
    <link href='https://api.mapbox.com/mapbox-gl-js/v0.53.0/mapbox-gl.css' rel='stylesheet' />
    <link rel='stylesheet' href='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-draw/v1.0.9/mapbox-gl-draw.css' type='text/css' />
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss/dist/tailwind.min.css" rel="stylesheet">
    <link rel='stylesheet' href='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v2.3.0/mapbox-gl-geocoder.css' type='text/css' />

    <style>
        body {
            margin: 0;
            padding: 0;
        }

        #map {
            position: absolute;
            top: 0;
            bottom: 0;
            width: 100%;
        }

        #info {
            display: block;
            position: relative;
            margin: 0px auto;
            width: 50%;
            padding: 10px;
            border: none;
            border-radius: 3px;
            font-size: 12px;
            text-align: center;
            color: #222;
            background: #fff;
        }

        .form-submit-button {
            background: #5181b8;
            color: white;
            border-style: outset;
            border-color: #5181b8;
            height: 30px;
            width: 200px;
            font: bold 15px arial, sans-serif;
            text-shadow: none;
        }

        .inputClass {
            border: 1px solid #9E9E9E;
            color: #000000;
            padding: 3px;
            margin-top: 2px;
            margin-bottom: 2px;
            font-size: 11px;
            font-family: Verdana;
            background: #FFF;
        }

        .topcorner {
            position: absolute;
            top: 30px;
            right: 30px;
        }
    </style>
</head>
<body>
<div id='map'></div>

<div class="topcorner">
    <input type="search" class="form-control" id="address-input" placeholder="Search..." />
    <br />
    <br />
    <label style="background: #5181b8; color: white; font-weight: bold;">Количество грузовиков:</label>
    <br />
    <input type="number" class="inputClass" id="vehicleCount">
    <br />
    <br />
    <label style="background: #5181b8; color: white; font-weight: bold;">Вместимость грузовиков:</label>
    <br />
    <input type="number" class="inputClass" id="maxVehicle">
    <br />
    <br />
    <label style="background: #5181b8; color: white; font-weight: bold;">Максимальный спрос клиентов:</label>
    <br />
    <input type="number" class="inputClass" id="maxDemand">
    <br /><br />
    <input type="button" class="form-submit-button" value="Добавить клиентов" onclick="getMatchAll();" />
    <br /><br />
    <input type="button" class="form-submit-button" value="Расчёт" id="sendButton" />
    <br /><br />
    <input type="button" class="form-submit-button" value="Очистить решение" onclick="clearAllLayers();" />
    <br /><br />
    <input type="button" class="form-submit-button" value="Сохранить инструкции"  onclick="saveInstructions();" />
    <br /><br />
    <label id="Cost"></label>
</div>
    <script src='https://api.mapbox.com/mapbox-gl-js/v0.53.0/mapbox-gl.js'></script>
    <script src="https://cdn.jsdelivr.net/npm/places.js@1.4.15"></script>
    <script src="https://code.jquery.com/jquery-1.11.0.min.js"></script>
    <script src="~/lib/signalr/dist/browser/signalr.js"></script>
    <script src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v2.3.0/mapbox-gl-geocoder.min.js'></script>

<script>
    mapboxgl.accessToken = '@Model.MapboxAccessToken';
    var map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/streets-v11',
        zoom: 1
    });
    var geocoder = new MapboxGeocoder({
        accessToken: mapboxgl.accessToken,
    });
    var distancies = [];
    var coordsbetweencoords = {};
    var count = 0;
    var clientsCount = 0;
    var tripDirections = {};
    var saveDirections = [];
    var nav = new mapboxgl.NavigationControl();
    var jsonObj = {};
    var colorArray = ['#FF6633', '#FFB399', '#FF33FF', '#FFFF99', '#00B3E6',
        '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',
        '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A',
        '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC',
        '#66994D', '#B366CC', '#4D8000', '#B33300', '#CC80CC',
        '#66664D', '#991AFF', '#E666FF', '#4DB3FF', '#1AB399',
        '#E666B3', '#33991A', '#CC9999', '#B3B31A', '#00E680',
        '#4D8066', '#809980', '#E6FF80', '#1AFF33', '#999933',
        '#FF3380', '#CCCC00', '#66E64D', '#4D80CC', '#9900B3',
        '#E64D66', '#4DB380', '#FF4D4D', '#99E6E6', '#6666FF'];
    var coordinates = [];
    var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();
    var marker = [];
    var coordMarkers = [];
    var layerNames = [];
    document.getElementById("sendButton").disabled = true;

    document.getElementById("sendButton").addEventListener("click", function (event) {
        if (clientsCount == 0) {
            alert("Добавьте клиентов");
            return;
        }
        else if (clientsCount < Math.pow(Object.keys(jsonObj).length - 1, 2)) {
            alert("Ещё не все клиенты добавлены");
            return;
        }
        var vehicle = document.getElementById("vehicleCount").value;
        var maxVehicle = document.getElementById("maxVehicle").value;
        var maxDemand = document.getElementById("maxDemand").value;
        var jsonSend = JSON.stringify(jsonObj).toString();
        var distanceSend = distancies.toString(); 
        connection.invoke("SendMessage", vehicle, maxVehicle, maxDemand, jsonSend, distanceSend).catch(function (err) {
            return console.error(err.toString());
        });
            event.preventDefault();
    });

    function getMatchAll() {
        clientsCount = 0;
        for (var i = 0; i < Object.keys(jsonObj).length; i++) {
            for (var j = 0; j < Object.keys(jsonObj).length; j++) {
                var v = i * Object.keys(jsonObj).length + j;
                //if (distancies[v] == undefined)
                getMatch(i, j, v);
            }
        }
        
    }

    function getMatch(e, q, v) {

        var url = 'https://api.mapbox.com/directions/v5/mapbox/driving/' + jsonObj[e].lng + ',' + jsonObj[e].lat
            + ';' + jsonObj[q].lng + ',' + jsonObj[q].lat
            + '?geometries=geojson&steps=true&access_token=' + mapboxgl.accessToken;
        //console.log(url);
        var req = new XMLHttpRequest();
        req.responseType = 'json';
        req.open('GET', url, true);
        req.onload  = function() {
            var jsonResponse = req.response;
            var distance = jsonResponse.routes[0].distance*0.001;
            var duration = jsonResponse.routes[0].duration/60;
            var steps = jsonResponse.routes[0].legs[0].steps;
            var coords = jsonResponse.routes[0].geometry;
            //console.log(steps);
            //console.log(coords);
            //console.log(distance);
            //console.log(duration);
            distancies[v] = distance;
            coordsbetweencoords[jsonObj[e].lng.toString() + jsonObj[q].lng.toString()] = coords;
            tripDirections[jsonObj[e].lng.toString() + jsonObj[q].lng.toString()] = getInstructions(jsonResponse.routes[0], q);
            clientsCount++;
            if (clientsCount === Math.pow(Object.keys(jsonObj).length - 1, 2)) alert("Клиенты добавлены");
        };
        req.send();
        
    }

    connection.start().then(function(){
        document.getElementById("sendButton").disabled = false;
    }).catch(function (err) {
        return console.error(err.toString());
    });

    function clearLayers() {
        for (var i = 0; i < layerNames.length; i++) {
            try {
                map.removeLayer(i.toString());
                map.removeSource(i.toString());
            }
            catch(err){}
        }
        if (marker.length > 0) {
        marker.forEach((m) => m.remove());
            marker = [];
        }
    }

    function getInstructions(data, q) {
        var directions = [];
        var legs = data.legs;
        var stepCount = 0;
        // Output the instructions for each step of each leg in the response object
        for (var i = 0; i < legs.length; i++) {
            var steps = legs[i].steps;
            for (var j = 0; j < steps.length; j++) {
                directions.push("Step " + (stepCount + 1).toString() + ":" + steps[j].maneuver.instruction + "\n");
                stepCount++;
            }
            directions.push("Вы добрались до (" + jsonObj[q].lng.toString() +  ";" + jsonObj[q].lat.toString() + ") точки.\n")
        }
        return directions;
    }

    function clearAllLayers() {
        clearLayers();
        coordMarkers.forEach((m) => m.remove());
        coordMarkers = [];
        jsonObj = {};
        distancies = [];
        coordsbetweencoords = {};
        count = 0;
        layerNames = [];
        document.getElementById("Cost").textContent = "";
    }

    function saveInstructions() {
        saveDirections = [coordinates.length];
        for (var i = 0; i < coordinates.length; i++) {
            saveDirections[i] = "Vehicle " + (i+1).toString() + ":\n";
            for (var k = 0; k < coordinates[i].length - 2; k += 2) {
                saveDirections[i] += tripDirections[coordinates[i][k].toString() + coordinates[i][k + 2].toString()];
            }
        }

        var a = document.createElement("a");
        var file = new Blob([saveDirections], {type: "application/doc"});
        a.href = URL.createObjectURL(file);
        a.download = "instructions.doc";
        a.click();
        //return saveDirections;
    }

    connection.on("ReceiveMessage", function (jsonResult, cost) {
        clearLayers();
        layerNames = [coordinates.length];
        coordinates = JSON.parse(jsonResult);
        for (var i = 0; i < coordinates.length; i++) {
            var buf = new Array();
            var cccount = 0;
            var count2 = 0;
            for (var k = 0; k < coordinates[i].length - 2; k += 2) {
                buf[cccount] = [coordinates[i][k], coordinates[i][k + 1]];
                count2++;
                var el = document.createElement('div'); el.className = 'marker';
                el.innerHTML = '<span style="font-size: 250%; background: inherit;"><b>' + count2 + '</b></span>';
                el.fontSize = "large";
                marker.push(new mapboxgl.Marker(el).setLngLat([coordinates[i][k], coordinates[i][k + 1]]).addTo(map));
                cccount++;
                var coordCount = coordsbetweencoords[coordinates[i][k].toString() + coordinates[i][k + 2].toString()].coordinates.length;
                for (var z = 0; z < coordCount; z++) {
                    buf[cccount] = coordsbetweencoords[coordinates[i][k].toString() + coordinates[i][k + 2].toString()].coordinates[z];
                    cccount += 1;
                }
            }
            layerNames[i] = i;
            map.addLayer({
                "id": layerNames[i].toString(),
                "type": "line",
                "source": {
                    "type": "geojson",
                    "data": {
                        "type": "Feature",
                        "properties": {},
                        "geometry": {
                            "type": "LineString",
                            "coordinates": buf
                        }
                    }
                },
                "layout": {
                    "line-join": "round",
                    "line-cap": "round"
                },
                "paint": {
                    "line-color": colorArray[i],
                    "line-width": 8
                }
            });
            //console.log(buf);
        }

        document.getElementById("Cost").textContent = "Cost: " + cost;
        document.getElementById("Cost").style.backgroundColor = "#5181b8";
        document.getElementById("Cost").style.color = "white";
    });

    var placesAutocomplete = places({
        container: document.querySelector('#address-input'),
        type: 'city'
    });
    placesAutocomplete.on('change',
        e => {
            map.flyTo({
                center: [e.suggestion.latlng.lng, e.suggestion.latlng.lat],
                zoom: 9
            });
        });

    map.addControl(nav, 'bottom-right');

    map.on('load',
        () => {
            map.on('click',
                function (e) {
                    clientsCount = 0;
                    var marker;
                    if (count === 0) {
                           marker = new window.mapboxgl.Marker({ color: 'red' }).setLngLat(e.lngLat).addTo(map);
                    } else {
                            marker = new window.mapboxgl.Marker().setLngLat(e.lngLat).addTo(map);
                    }
                    coordMarkers.push(marker);
                    jsonObj[count] = e.lngLat;
                    count++;
                });
        });
</script>
</body>
</html>